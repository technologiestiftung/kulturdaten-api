openapi: 3.0.3
info:
  title: API Kulturdaten.Berlin
  description: |
    Willkommen zur Kulturdaten.Berlin-API! Diese API ermöglicht es Ihnen, eine Vielzahl von Funktionen zu nutzen, um Veranstaltungen, Kulturorte, Kulturangebote und Kulturakteure in Berlin zu entdecken.
    Sind Sie Kulturakteur, können Sie bequem Ihre Veranstaltungen und Kulturorte verwalten.
    
    Die API ist in mehrere Bereiche gegliedert. 

    - **Events, Angebote, Orte und Akteure entdecken** - Hier entdecken Sie, was kulturell in Berlin geboten wird. Viele Such- und Filtereinstellungen ermöglichen es Ihnen, nur die Kulturorte und Kulturakteure zu finden, die Sie wirklich benötigen.
    - **Nutzer verwalten** - Für viele Funktionen dieser API müssen Sie als Nutzer registriert sein. Hier können Sie sich registrieren und ihre Nutzerdaten verwalten. 
    - **Akteure verwalten** - Kulturaktuere betreiben Kulturorte und/oder bieten Kulrutveranstaltungen an. Hier können Sie Akteure anlegen, diese verwalten und anderen Nutzern Rechte geben, dies auch zu tun.
    - **Orte verwalten** - Hier spielt die Musik. Kulturorte sind die Orte, an denen Kulturveranstaltungen stattfinden. Hier können Sie als Akteur Orte anlegen und diese verwalten. Auch können Sie anderen Nutzern Rechte geben, dies auch zu tun. 
    - **Angebote verwalten** - Bei einer Veranstaltung wird immer etwas angeboten. Was dies ist, beschreibt das Angebot - ein Konzert, eine Ausstellung oder eine Lesung. Hier können Sie als Akteur Angebote anlegen und diese verwalten.
    - **Events verwalten** - Eine Veranstaltung beantwortet die Frage: Was (Angbot) findet wann (Termin), wo (Ort), von wem (Aktuer) und unter welchen Umständen statt? Hier können Sie als Aktuer Veranstaltungen anlegen und verwalten.


    TODO: 
    
    Um die API zu verwenden, benötigen Sie einen API-Schlüssel, den Sie von unserer Website erhalten können. Senden Sie bei jedem API-Aufruf den API-Schlüssel im Header.

    Hier ist ein Beispiel für einen API-Aufruf zum Abrufen von Informationen zu einem Buch:

    ```
    GET /api/v1/books/{id}
    Headers:
      Authorization: Bearer {Ihr API-Schlüssel}
    ```

    In der Antwort erhalten Sie detaillierte Informationen zum Buch, einschließlich Titel, Autor, Preis und Verfügbarkeit.

    Sie können auch die API-Dokumentation für weitere Informationen und Beispiele zu jedem Endpunkt konsultieren.


    Hier ist ein Beispiel für einen API-Aufruf zum Abrufen von Informationen zu einem Buch:

    ```
    GET /api/v1/books/{id}
    Headers:
      Authorization: Bearer {Ihr API-Schlüssel}
    ```

    In der Antwort erhalten Sie detaillierte Informationen zum Buch, einschließlich Titel, Autor, Preis und Verfügbarkeit.

    Sie können auch die API-Dokumentation für weitere Informationen und Beispiele zu jedem Endpunkt konsultieren.

  version: "1.0.0"
servers:
  - url: http://localhost:3000/api/
paths:
  /authentication/token:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"

  /events:
    get:
      tags:
        - Discover cultural data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"
    post:
      tags:
        - Maintain cultural data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandEventCreate"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string

  /events/{identifier}:
    parameters:
      - in: path
        name: identifier
        required: true
        schema:
          type: string
        description: The event ID
    get:
      tags:
        - Discover cultural data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: "#/components/schemas/Event"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    patch:
      tags:
        - Maintain cultural data
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CommandEventSwitchStatus"
                - $ref: "#/components/schemas/CommandEventSwitchVisibility"
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    delete:
      tags:
        - Maintain cultural data
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"


  /attraction:
    get:
      tags:
        - Discover cultural data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: "#/components/schemas/Attraction"
    post:
      tags:
        - Maintain cultural data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandAttractionCreate"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string

  /attraction/{identifier}:
    parameters:
      - in: path
        name: identifier
        required: true
        schema:
          type: string
        description: The attraction ID
    get:
      tags:
        - Discover cultural data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  attraction:
                    $ref: "#/components/schemas/Attraction"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    patch:
      tags:
        - Maintain cultural data
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CommandAttractionSwitchVisibility"
                - $ref: "#/components/schemas/CommandAttractionEditProfile"
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    delete:
      tags:
        - Maintain cultural data
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"


  /locations:
    get:
      tags:
        - Discover cultural data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                    items:
                      $ref: "#/components/schemas/Location"
    post:
      tags:
        - Maintain cultural data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandLocationCreate"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string

  /locations/{identifier}:
    parameters:
      - in: path
        name: identifier
        required: true
        schema:
          type: string
        description: The location ID
    get:
      tags:
        - Discover cultural data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    $ref: "#/components/schemas/Location"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    patch:
      tags:
        - Maintain cultural data
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CommandLocationSwitchVisibility"
                - $ref: "#/components/schemas/CommandLocationEditProfile"
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    delete:
      tags:
        - Maintain cultural data
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /organizations:
    get:
      tags:
        - Discover cultural data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: "#/components/schemas/Organization"

    post:
      tags:
        - Maintain cultural data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandOrganizationCreate"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string

  /organizations/{identifier}:
    parameters:
      - in: path
        name: identifier
        required: true
        schema:
          type: string
        description: The organization ID
    get:
      tags:
        - Discover cultural data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  organization:
                    $ref: "#/components/schemas/Organization"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    patch:
      tags:
        - Maintain cultural data
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CommandOrganizationSwitchVisibility"
                - $ref: "#/components/schemas/CommandOrganizationEditProfile"
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    delete:
      tags:
        - Maintain cultural data
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /users:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
    post:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailAlreadyInUseError"

  /users/{identifier}:
    parameters:
      - in: path
        name: identifier
        required: true
        schema:
          type: string
        description: The user ID
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    patch:
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchUser"
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
    delete:
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "204":
          description: OK
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

  /health:
    get:
      tags:
        - Server
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  /admin/harvest/baevents-bezirkskalender:
    post:
      tags:
        - Admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  createsOrganizations:
                    type: array
                    items:
                      type: string
                  alreadyExistsOrganizationIDs:
                      type: array
                      items:
                        type: string                 
                  createdLocations:
                    type: array
                    items:
                      type: string
                  createdEvents:
                    type: array
                    items:
                      type: string
                    

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Login:
      $ref: models/Login.yml

    Auth:
      $ref: models/Auth.yml

    Event:
      $ref: models/Event.yml

    CommandEventCreate:
      $ref: models/CommandEventCreate.yml

    CommandEventSwitchStatus:
      $ref: models/CommandEventSwitchStatus.yml

    CommandEventSwitchVisibility:
      $ref: models/CommandEventSwitchVisibility.yml

    Attraction:
      $ref: models/Attraction.yml

    CommandAttractionSwitchVisibility:
      $ref: models/CommandAttractionSwitchVisibility.yml

    CommandAttractionEditProfile:
      $ref: models/CommandAttractionEditProfile.yml 

    Location:
      $ref: models/Location.yml

    CommandLocationCreate:
      $ref: models/CommandLocationCreate.yml

    CommandLocationSwitchVisibility:
      $ref: models/CommandLocationSwitchVisibility.yml

    CommandLocationEditProfile:
      $ref: models/CommandLocationEditProfile.yml

    Organization:
      $ref: models/Organization.yml
    
    CommandOrganizationCreate:
      $ref: models/CommandOrganizationCreate.yml

    CommandOrganizationSwitchVisibility:
      $ref: models/CommandOrganizationSwitchVisibility.yml  

    CommandOrganizationEditProfile:
      $ref: models/CommandOrganizationEditProfile.yml 


    User:
      $ref: models/User.yml

    CreateUser:
      $ref: models/CreateUser.yml

    PatchUser:
      $ref: models/PatchUser.yml

    Health:
      $ref: models/Health.yml

    NotFoundError:
      $ref: models/NotFoundError.yml

    EmailAlreadyInUseError:
      $ref: models/EmailAlreadyInUseError.yml
