import { writeFileSync, readdir } from 'fs';
import { parse } from 'path';
import { compile, JSONSchema } from 'json-schema-to-typescript';
import { readFileSync } from 'fs';
import * as yaml from 'js-yaml';

async function generate() {

	const directoryPath = './src/schemas/';

	readdir(directoryPath, function (err, files) {
		if (err) {
			console.error('Error reading directory: ' + err);
			return;
		}

		console.log('Files in directory:');
		files.forEach(function (file) {
			const { name } = parse(file);
			console.log(name);
		});
	});


	generateInterface('Organization');
	generateInterface('CreateOrganization');
	generateInterface('PatchOrganization');

	generateInterface('User');
	generateInterface('CreateUser');
	generateInterface('PatchUser');

	generateInterface('Event');

	generateInterface('Location');

	generateInterface('ImageObject');

	generateInterface('Auth');
	generateInterface('Login');

	generateInterface('Health');

	generateInterface('NotFoundError');
	generateInterface('Core');

	generateInterface('Text');
	generateInterface('Description');
	generateInterface('Title');
	generateInterface('SubTitle');
}



async function generateInterface(className: string, rootDirectory: string = './src/schemas') {

	const options = (baseFile: string, dependencies: string) => {

		return {
			bannerComment: `/* eslint-disable */
		/**
		 * This file was automatically generated by json-schema-to-typescript.
		 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file.
		 * 
		 * =>  @see ${baseFile}
		 * 
		 * and run "npm run schema-to-interface" or "npm run generate" to regenerate this file.
		 */
		 ${dependencies}
		`,
			additionalProperties: false,
			cwd: rootDirectory,
			declareExternallyReferenced: false,
		}
	};
	const schemaPath = `./src/schemas/${className}.yml`;
	const schemaYaml = readFileSync(schemaPath, 'utf8');
	const schemaObject = yaml.load(schemaYaml) as JSONSchema;
	const parsedDependencies = parseDependenciesFrom(className);
	const dependencies = generateImportsForDependencies(parsedDependencies);
	const targetType = await compile(schemaObject, className, options(schemaPath, dependencies));
	const targetPath = `./src/generatedModels/${className}.generated.ts`;

	writeFileSync(targetPath, targetType);
}


function parseDependenciesFrom(file: string): string[] {
	const schemaPath = `./src/schemas/${file}.yml`;
	const schemaYaml = readFileSync(schemaPath, 'utf8');
	let regexForDependencies: RegExp = /[A-Za-z]+(?=.yml)/g;
	const dependencies = new Set(schemaYaml.match(regexForDependencies));
	return [...dependencies];
}

function generateImportForDependency(dependency: string) {
	return dependency ? `import { ${dependency} } from './${dependency}.generated';` : '';
}

function generateImportsForDependencies(dependencies: string[]) {
	let imports = '';
	dependencies.forEach(dependency => {
		imports += '\n';
		imports += generateImportForDependency(dependency);
	});
	return imports;
}

generate();