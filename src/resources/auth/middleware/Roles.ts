export type Role = {
	readonly role: string;
	readonly allowedRoutes: ReadonlyArray<string>;
};

export const Roles: readonly Role[] = [
	{
		role: "admin",
		allowedRoutes: [
			"GET:/attractions/",
			"POST:/attractions/",
			"POST:/attractions/bulk-create",
			"POST:/attractions/search",
			"GET:/attractions/:identifier",
			"PATCH:/attractions/:identifier",
			"POST:/attractions/:identifier/externallinks",
			"DELETE:/attractions/:identifier/externallinks",
			"POST:/attractions/:identifier/archive",
			"POST:/attractions/:identifier/unarchive",
			"POST:/attractions/:identifier/publish",
			"POST:/attractions/:identifier/unpublish",
			"GET:/organizations/",
			"POST:/organizations/",
			"POST:/organizations/bulk-create",
			"POST:/organizations/search",
			"GET:/organizations/:identifier",
			"PATCH:/organizations/:identifier",
			"POST:/organizations/:identifier/activate",
			"POST:/organizations/:identifier/deactivate",
			"POST:/organizations/:identifier/retire",
			"POST:/organizations/:identifier/archive",
			"POST:/organizations/:identifier/unarchive",
			"GET:/events/",
			"POST:/events/",
			"POST:/events/bulk-create",
			"POST:/events/search",
			"GET:/events/:identifier",
			"PATCH:/events/:identifier",
			"PUT:/events/:identifier/locations",
			"DELETE:/events/:identifier/locations",
			"PUT:/events/:identifier/attractions",
			"DELETE:/events/:identifier/attractions",
			"PUT:/events/:identifier/organizer",
			"DELETE:/events/:identifier/organizer",
			"POST:/events/:identifier/publish",
			"POST:/events/:identifier/unpublish",
			"POST:/events/:identifier/reschedule",
			"POST:/events/:identifier/postpone",
			"POST:/events/:identifier/cancel",
			"POST:/events/:identifier/archive",
			"POST:/events/:identifier/unarchive",
			"POST:/events/:identifier/duplicate",
			"GET:/locations/",
			"POST:/locations/",
			"POST:/locations/bulk-create",
			"POST:/locations/search",
			"GET:/locations/:identifier",
			"PATCH:/locations/:identifier",
			"POST:/locations/:identifier/manager",
			"DELETE:/locations/:identifier/manager",
			"POST:/locations/:identifier/open",
			"POST:/locations/:identifier/close",
			"POST:/locations/:identifier/permanentlyClose",
			"POST:/locations/:identifier/archive",
			"POST:/locations/:identifier/unarchive",
			"POST:/locations/:identifier/claim",
		],
	},
	{
		role: "editor",
		allowedRoutes: [
			"GET:/attractions/",
			"POST:/attractions/",
			"POST:/attractions/bulk-create",
			"POST:/attractions/search",
			"GET:/attractions/:identifier",
			"PATCH:/attractions/:identifier",
			"POST:/attractions/:identifier/externallinks",
			"DELETE:/attractions/:identifier/externallinks",
			"POST:/attractions/:identifier/archive",
			"POST:/attractions/:identifier/unarchive",
			"POST:/attractions/:identifier/publish",
			"POST:/attractions/:identifier/unpublish",
			"GET:/organizations/",
			"POST:/organizations/search",
			"GET:/organizations/:identifier",
			"GET:/events/",
			"POST:/events/",
			"POST:/events/bulk-create",
			"POST:/events/search",
			"GET:/events/:identifier",
			"PATCH:/events/:identifier",
			"PUT:/events/:identifier/locations",
			"DELETE:/events/:identifier/locations",
			"PUT:/events/:identifier/attractions",
			"DELETE:/events/:identifier/attractions",
			"PUT:/events/:identifier/organizer",
			"DELETE:/events/:identifier/organizer",
			"POST:/events/:identifier/publish",
			"POST:/events/:identifier/unpublish",
			"POST:/events/:identifier/reschedule",
			"POST:/events/:identifier/postpone",
			"POST:/events/:identifier/cancel",
			"POST:/events/:identifier/archive",
			"POST:/events/:identifier/unarchive",
			"POST:/events/:identifier/duplicate",
			"GET:/locations/",
			"POST:/locations/",
			"POST:/locations/bulk-create",
			"POST:/locations/search",
			"GET:/locations/:identifier",
			"PATCH:/locations/:identifier",
			"POST:/locations/:identifier/manager",
			"DELETE:/locations/:identifier/manager",
			"POST:/locations/:identifier/open",
			"POST:/locations/:identifier/close",
			"POST:/locations/:identifier/permanentlyClose",
			"POST:/locations/:identifier/archive",
			"POST:/locations/:identifier/unarchive",
		],
	},
	{
		role: "author",
		allowedRoutes: [
			"GET:/attractions/",
			"POST:/attractions/",
			"POST:/attractions/bulk-create",
			"POST:/attractions/search",
			"GET:/attractions/:identifier",
			"PATCH:/attractions/:identifier",
			"POST:/attractions/:identifier/externallinks",
			"DELETE:/attractions/:identifier/externallinks",
			"POST:/attractions/:identifier/archive",
			"POST:/attractions/:identifier/unarchive",
			"GET:/organizations/",
			"POST:/organizations/search",
			"GET:/organizations/:identifier",
			"GET:/events/",
			"POST:/events/",
			"POST:/events/bulk-create",
			"POST:/events/search",
			"GET:/events/:identifier",
			"PATCH:/events/:identifier",
			"PUT:/events/:identifier/locations",
			"DELETE:/events/:identifier/locations",
			"PUT:/events/:identifier/attractions",
			"DELETE:/events/:identifier/attractions",
			"PUT:/events/:identifier/organizer",
			"DELETE:/events/:identifier/organizer",
			"POST:/events/:identifier/reschedule",
			"POST:/events/:identifier/postpone",
			"POST:/events/:identifier/cancel",
			"POST:/events/:identifier/archive",
			"POST:/events/:identifier/unarchive",
			"POST:/events/:identifier/duplicate",
			"GET:/locations/",
			"POST:/locations/",
			"POST:/locations/bulk-create",
			"POST:/locations/search",
			"GET:/locations/:identifier",
			"PATCH:/locations/:identifier",
			"POST:/locations/:identifier/manager",
			"DELETE:/locations/:identifier/manager",
			"POST:/locations/:identifier/open",
			"POST:/locations/:identifier/close",
			"POST:/locations/:identifier/permanentlyClose",
			"POST:/locations/:identifier/archive",
			"POST:/locations/:identifier/unarchive",
		],
	},
	{
		role: "member",
		allowedRoutes: [
			"GET:/attractions/",
			"GET:/attractions/:identifier",
			"GET:/organizations/",
			"POST:/organizations/search",
			"GET:/organizations/:identifier",
			"GET:/events/",
			"POST:/events/search",
			"GET:/events/:identifier",
			"GET:/locations/",
			"POST:/locations/search",
			"GET:/locations/:identifier",
		],
	},
	{
		role: "unassigned",
		allowedRoutes: [],
	},
];

export function getRoleByRoleName(roleName: string): Role {
	const lowerCaseRoleName = roleName.toLowerCase();
	const foundRole = Roles.find((role) => role.role === lowerCaseRoleName);
	return foundRole || Roles.find((role) => role.role === "unassigned")!;
}

export function checkPermissionForRole(roleName: string | undefined, action: string): boolean {
	if (!roleName) {
		return false;
	}
	const role = getRoleByRoleName(roleName);
	return role.allowedRoutes.some((route) => route === action);
}
