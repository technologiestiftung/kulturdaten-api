import { writeFileSync } from 'fs';
import { readdir } from 'fs/promises';
import { parse } from 'path';
import { compile, JSONSchema } from 'json-schema-to-typescript';
import { readFileSync } from 'fs';
import * as yaml from 'js-yaml';

async function generate() {
	const directoryPath = './src/schemas/models';

	let	schemaFiles = await readdir(directoryPath);
	
	schemaFiles.forEach(async function (file) {
		const { name } = parse(file);
		await generateInterface(name);
		console.log(`Generated interfaces for ${file}`);
	});
}

async function generateInterface(className: string, rootDirectory: string = './src/schemas/models') {
	const options = (baseFile: string, dependencies: string) => {
		return {
			bannerComment: `/* eslint-disable */
		/**
		 * This file was automatically generated by json-schema-to-typescript.
		 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file.
		 * 
		 * =>  @see ${baseFile}
		 * 
		 * and run "npm run schema-to-interface" or "npm run generate" to regenerate this file.
		 */
		 ${dependencies}
		`,
			additionalProperties: false,
			cwd: rootDirectory,
			declareExternallyReferenced: false,
		}
	};
	const schemaPath = `${rootDirectory}/${className}.yml`;
	const schemaYaml = readFileSync(schemaPath, 'utf8');
	const schemaObject = await yaml.load(schemaYaml) as JSONSchema;
	const parsedDependencies = await parseDependenciesFrom(className, rootDirectory);
	const dependencies = generateImportsForDependencies(parsedDependencies);
	const targetType = await compile(schemaObject, className, options(schemaPath, dependencies));
	const targetPath = `./src/generated/models/${className}.generated.ts`;

	writeFileSync(targetPath, targetType);
}


async function parseDependenciesFrom(file: string, rootDirectory: string): Promise<string[]> {
	const schemaPath = `${rootDirectory}/${file}.yml`;
	const schemaYaml = readFileSync(schemaPath, 'utf8');
	let regexForDependencies: RegExp = /[A-Za-z]+(?=.yml)/g;
	const dependencies = new Set(schemaYaml.match(regexForDependencies));
	return [...dependencies];
}

function generateImportForDependency(dependency: string) {
	return dependency ? `import { ${dependency} } from './${dependency}.generated';` : '';
}

function generateImportsForDependencies(dependencies: string[]) {
	let imports = '';
	dependencies.forEach(dependency => {
		imports += '\n';
		imports += generateImportForDependency(dependency);
	});
	return imports;
}

generate();