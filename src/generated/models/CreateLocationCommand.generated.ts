/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file.
 *
 * =>  @see ./src/schemas/models/CreateLocationCommand.yml
 *
 * and run "npm run schema-to-interface" or "npm run generate" to regenerate this file.
 */

import Ajv, {ValidateFunction} from "ajv";
import addFormats from "ajv-formats";

import {LocationProfile, schemaForLocationProfile} from "./LocationProfile.generated";
import {LocationStatus, schemaForLocationStatus} from "./LocationStatus.generated";
import {Address, schemaForAddress} from "./Address.generated";
import {Borough, schemaForBorough} from "./Borough.generated";
import {Coordinates, schemaForCoordinates} from "./Coordinates.generated";
import {LocationClassification, schemaForLocationClassification} from "./LocationClassification.generated";
import {Reference, schemaForReference} from "./Reference.generated";
import {Contact, schemaForContact} from "./Contact.generated";

export const schemaForCreateLocationCommand = {
  $id: "CreateLocationCommand.yml",
  type: "object",
  properties: {
    type: {type: "string", enum: ["type.command.Location.create"]},
    payload: {
      type: "object",
      properties: {
        profile: {$ref: "LocationProfile.yml"},
        status: {$ref: "LocationStatus.yml"},
        address: {$ref: "Address.yml"},
        borough: {$ref: "Borough.yml"},
        coordinates: {$ref: "Coordinates.yml"},
        classifications: {$ref: "LocationClassification.yml"},
        manager: {$ref: "Reference.yml"},
        contact: {$ref: "Contact.yml"}
      }
    }
  }
};

export function validateCreateLocationCommand(o: object): {isValid: boolean; validate: ValidateFunction} {
  const ajv = new Ajv();
  addFormats(ajv);
  ajv.addKeyword("example");
  ajv.addSchema(schemaForLocationProfile, "LocationProfile.yml");
  ajv.addSchema(schemaForLocationStatus, "LocationStatus.yml");
  ajv.addSchema(schemaForAddress, "Address.yml");
  ajv.addSchema(schemaForBorough, "Borough.yml");
  ajv.addSchema(schemaForCoordinates, "Coordinates.yml");
  ajv.addSchema(schemaForLocationClassification, "LocationClassification.yml");
  ajv.addSchema(schemaForReference, "Reference.yml");
  ajv.addSchema(schemaForContact, "Contact.yml");

  const validate = ajv.compile(schemaForCreateLocationCommand);
  return {isValid: validate(o), validate: validate};
}

export interface CreateLocationCommand {
  type?: "type.command.Location.create";
  payload?: {
    profile?: LocationProfile;
    status?: LocationStatus;
    address?: Address;
    borough?:
      | "Mitte"
      | "Friedrichshain-Kreuzberg"
      | "Pankow"
      | "Charlottenburg-Wilmersdorf"
      | "Spandau"
      | "Steglitz-Zehlendorf"
      | "Tempelhof-Schöneberg"
      | "Neukölln"
      | "Treptow-Köpenick"
      | "Marzahn-Hellersdorf"
      | "Lichtenberg"
      | "Reinickendorf"
      | "außerhalb";
    coordinates?: Coordinates;
    classifications?: LocationClassification;
    manager?: Reference;
    contact?: Contact;
  };
}
