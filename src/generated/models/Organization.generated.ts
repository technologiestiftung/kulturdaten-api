/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file.
 *
 * =>  @see ./src/schemas/models/Organization.yml
 *
 * and run "npm run schema-to-interface" or "npm run generate" to regenerate this file.
 */

import Ajv, {ValidateFunction} from "ajv";
import addFormats from "ajv-formats";

import {Metadata, schemaForMetadata} from "./Metadata.generated";
import {OrganizationProfile, schemaForOrganizationProfile} from "./OrganizationProfile.generated";
import {OrganizationStatus, schemaForOrganizationStatus} from "./OrganizationStatus.generated";
import {Address, schemaForAddress} from "./Address.generated";
import {Borough, schemaForBorough} from "./Borough.generated";
import {OrganizationClassification, schemaForOrganizationClassification} from "./OrganizationClassification.generated";
import {Contact, schemaForContact} from "./Contact.generated";

export const schemaForOrganization = {
  $id: "Organization.yml",
  type: "object",
  required: ["identifier"],
  properties: {
    type: {type: "string", enum: ["type.Organization"]},
    identifier: {type: "string"},
    metadata: {$ref: "Metadata.yml"},
    profile: {$ref: "OrganizationProfile.yml"},
    status: {$ref: "OrganizationStatus.yml"},
    address: {$ref: "Address.yml"},
    borough: {$ref: "Borough.yml"},
    classifications: {$ref: "OrganizationClassification.yml"},
    contact: {$ref: "Contact.yml"}
  }
};

export function validateOrganization(o: object): {isValid: boolean; validate: ValidateFunction} {
  const ajv = new Ajv();
  addFormats(ajv);
  ajv.addKeyword("example");
  ajv.addSchema(schemaForMetadata, "Metadata.yml");
  ajv.addSchema(schemaForOrganizationProfile, "OrganizationProfile.yml");
  ajv.addSchema(schemaForOrganizationStatus, "OrganizationStatus.yml");
  ajv.addSchema(schemaForAddress, "Address.yml");
  ajv.addSchema(schemaForBorough, "Borough.yml");
  ajv.addSchema(schemaForOrganizationClassification, "OrganizationClassification.yml");
  ajv.addSchema(schemaForContact, "Contact.yml");

  const validate = ajv.compile(schemaForOrganization);
  return {isValid: validate(o), validate: validate};
}

export interface Organization {
  type?: "type.Organization";
  identifier: string;
  metadata?: Metadata;
  profile?: OrganizationProfile;
  status?: OrganizationStatus;
  address?: Address;
  borough?:
    | "Mitte"
    | "Friedrichshain-Kreuzberg"
    | "Pankow"
    | "Charlottenburg-Wilmersdorf"
    | "Spandau"
    | "Steglitz-Zehlendorf"
    | "Tempelhof-Schöneberg"
    | "Neukölln"
    | "Treptow-Köpenick"
    | "Marzahn-Hellersdorf"
    | "Lichtenberg"
    | "Reinickendorf"
    | "außerhalb";
  classifications?: OrganizationClassification;
  contact?: Contact;
}
