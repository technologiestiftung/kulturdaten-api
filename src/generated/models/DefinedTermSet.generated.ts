/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file.
 *
 * =>  @see ./src/schemas/models/DefinedTermSet.yml
 *
 * and run "npm run schema-to-interface" or "npm run generate" to regenerate this file.
 */

import Ajv, {ValidateFunction} from "ajv";
import addFormats from "ajv-formats";

import {Core, schemaForCore} from "./Core.generated";
import {DefinedTerm, schemaForDefinedTerm} from "./DefinedTerm.generated";
import {Reference, schemaForReference} from "./Reference.generated";
import {ShortText, schemaForShortText} from "./ShortText.generated";

export const schemaForDefinedTermSet = {
  $id: "DefinedTermSet.yml",
  allOf: [
    {$ref: "Core.yml"},
    {
      type: "object",
      properties: {
        "@type": {type: "string", enum: ["DefinedTermSet"]},
        forType: {type: "string"},
        forProperty: {type: "string"},
        terms: {type: "array", items: {$ref: "DefinedTerm.yml"}}
      }
    }
  ]
};

export function validateDefinedTermSet(o: object): {isValid: boolean; validate: ValidateFunction} {
  const ajv = new Ajv();
  addFormats(ajv);
  ajv.addKeyword("example");
  ajv.addSchema(schemaForCore, "Core.yml");
  ajv.addSchema(schemaForDefinedTerm, "DefinedTerm.yml");
  ajv.addSchema(schemaForReference, "Reference.yml");
  ajv.addSchema(schemaForShortText, "ShortText.yml");

  const validate = ajv.compile(schemaForDefinedTermSet);
  return {isValid: validate(o), validate: validate};
}

export type DefinedTermSet = Core & {
  "@type"?: "DefinedTermSet";
  forType?: string;
  forProperty?: string;
  terms?: DefinedTerm[];
};
