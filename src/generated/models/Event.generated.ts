/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file.
 *
 * =>  @see ./src/schemas/models/Event.yml
 *
 * and run "npm run schema-to-interface" or "npm run generate" to regenerate this file.
 */

import Ajv, {ValidateFunction} from "ajv";
import addFormats from "ajv-formats";

import {Metadata, schemaForMetadata} from "./Metadata.generated";
import {EventProfile, schemaForEventProfile} from "./EventProfile.generated";
import {EventStatus, schemaForEventStatus} from "./EventStatus.generated";
import {Reference, schemaForReference} from "./Reference.generated";
import {EventSchedule, schemaForEventSchedule} from "./EventSchedule.generated";
import {Contact, schemaForContact} from "./Contact.generated";
import {EventClassification, schemaForEventClassification} from "./EventClassification.generated";
import {EventAdmission, schemaForEventAdmission} from "./EventAdmission.generated";

export const schemaForEvent = {
  $id: "Event.yml",
  type: "object",
  required: ["identifier"],
  properties: {
    type: {type: "string", enum: ["type.Event"]},
    identifier: {type: "string"},
    metadata: {$ref: "Metadata.yml"},
    profile: {$ref: "EventProfile.yml"},
    status: {$ref: "EventStatus.yml"},
    attractions: {type: "array", items: {$ref: "Reference.yml"}},
    schedule: {$ref: "EventSchedule.yml"},
    locations: {type: "array", items: {$ref: "Reference.yml"}},
    organizer: {$ref: "Reference.yml"},
    contact: {$ref: "Contact.yml"},
    classification: {$ref: "EventClassification.yml"},
    admission: {$ref: "EventAdmission.yml"}
  }
};

export function validateEvent(o: object): {isValid: boolean; validate: ValidateFunction} {
  const ajv = new Ajv();
  addFormats(ajv);
  ajv.addKeyword("example");
  ajv.addSchema(schemaForMetadata, "Metadata.yml");
  ajv.addSchema(schemaForEventProfile, "EventProfile.yml");
  ajv.addSchema(schemaForEventStatus, "EventStatus.yml");
  ajv.addSchema(schemaForReference, "Reference.yml");
  ajv.addSchema(schemaForEventSchedule, "EventSchedule.yml");
  ajv.addSchema(schemaForContact, "Contact.yml");
  ajv.addSchema(schemaForEventClassification, "EventClassification.yml");
  ajv.addSchema(schemaForEventAdmission, "EventAdmission.yml");

  const validate = ajv.compile(schemaForEvent);
  return {isValid: validate(o), validate: validate};
}

export interface Event {
  type?: "type.Event";
  identifier: string;
  metadata?: Metadata;
  profile?: EventProfile;
  status?: EventStatus;
  attractions?: Reference[];
  schedule?: EventSchedule;
  locations?: Reference[];
  organizer?: Reference;
  contact?: Contact;
  classification?: EventClassification;
  admission?: EventAdmission;
}
