/* eslint-disable */
	/**
	 * This file was automatically generated by json-schema-to-typescript.
	 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file.
	 * 
	 * =>  @see ./src/schemas/models/CommandOrganizationCreate
	 * 
	 * and run "npm run schema-to-interface" or "npm run generate" to regenerate this file.
	 */

	import { JSONSchemaFaker, Schema } from 'json-schema-faker';
	import { CommandOrganizationCreate, schemaForCommandOrganizationCreate } from "../models/CommandOrganizationCreate.generated";

	import { schemaForOrganizationProfile } from '../models/OrganizationProfile.generated';
	import { schemaForOrganizationStatus } from '../models/OrganizationStatus.generated';
	import { schemaForAddress } from '../models/Address.generated';
	import { schemaForBorough } from '../models/Borough.generated';
	import { schemaForOrganizationClassification } from '../models/OrganizationClassification.generated';
	import { schemaForContact } from '../models/Contact.generated';

	export function fakeCommandOrganizationCreate(useExamples: boolean, specifiedPropertiesForCommandOrganizationCreate: object = {}): CommandOrganizationCreate {
		const schema = schemaForCommandOrganizationCreate as Schema;
		const refs : Schema[] = [
			schemaForOrganizationProfile as Schema,
			schemaForOrganizationStatus as Schema,
			schemaForAddress as Schema,
			schemaForBorough as Schema,
			schemaForOrganizationClassification as Schema,
			schemaForContact as Schema,

		];
		JSONSchemaFaker.option('useExamplesValue', useExamples);
		// @ts-ignore
		const fakeCommandOrganizationCreate: CommandOrganizationCreate = JSONSchemaFaker.generate(schema, refs) as CommandOrganizationCreate;
		// @ts-ignore
		const returnCommandOrganizationCreate = { ...fakeCommandOrganizationCreate, ...specifiedPropertiesForCommandOrganizationCreate };
		return returnCommandOrganizationCreate;
	}

	export function fakeCommandOrganizationCreates(useExamples: boolean, ...createCommandOrganizationCreate: object[]) : CommandOrganizationCreate[] {
		const returnCommandOrganizationCreates : CommandOrganizationCreate[] = [];
		createCommandOrganizationCreate.forEach(element => {
			returnCommandOrganizationCreates.push(fakeCommandOrganizationCreate(useExamples, element));
		});
		return returnCommandOrganizationCreates;
	}
	